import { render, screen, fireEvent } from '@testing-library/react'
import { useRouter } from 'next/router'
import { signIn, useSession } from 'next-auth/react'
import { SubscribeButton } from '.'

// jest.mock('next-auth/react');

// jest.mock('next/router');

// describe('SubscribeButton component', () => {
//   it('renders correctly', () => {

//     const useSessionMocked = jest.mocked(useSession)

//     useSessionMocked.mockReturnValueOnce([null, false])

//     render(
//       <SubscribeButton priceId={''} />    
//     )
  
//     expect(screen.getByText('Subscribe now')).toBeInTheDocument()
//   })
//   it('redirects user to sign in when not authenticated', () => {

//     const signInMocked = jest.mocked(signIn)
//     const useSessionMocked = jest.mocked(useSession)

//     useSessionMocked.mockReturnValueOnce([null, false])

//     render(
//       <SubscribeButton priceId={''} />    
//     )
  
//     const subscribeButton = screen.getByText('Subscribe now');

//     fireEvent.click(subscribeButton)

//     expect(signInMocked).toHaveBeenCalled()
//   });

//   it('redirects to posts when user already has a subscription', () => {
//     const useRouterMocked = jest.mocked(useRouter)
//     const useSessionMocked = jest.mocked(useSession)
//     const pushMock = jest.fn()

//     useSessionMocked.mockReturnValueOnce([
//       { user: {
//         name: 'John Doe',
//         email: 'john.doe@example.com' }, 
//         activeSubscription: 'fake-active-subscription',
//         expires: 'fake-expires' }, false
//     ])

//     useRouterMocked.mockReturnValueOnce({
//       push: pushMock
//     } as any)

//     render(
//       <SubscribeButton priceId={''}/>
//     )
//     const subscribeButton = screen.getByText('Subscribe now')

//     fireEvent.click(subscribeButton)

//     expect(pushMock).toHaveBeenCalledWith('/posts')
//   })
// })

